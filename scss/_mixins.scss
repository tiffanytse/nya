
@mixin ease{
  -webkit-transition: all 500ms ease-in-out;
  -moz-transition: all 500ms ease-in-out;
  -ms-transition: all 500ms ease-in-out;
  -o-transition: all 500ms ease-in-out;
  transition: all 500ms ease-in-out;
}

@mixin ease-color{
  -webkit-transition: color 350ms ease-in-out;
  -moz-transition: color 350ms ease-in-out;
  -ms-transition: color 350ms ease-in-out;
  -o-transition: color 350ms ease-in-out;
  transition: color 350ms ease-in-out;
}

@mixin ease-height{
  -webkit-transition: height 350ms ease-in-out;
  -moz-transition: height 350ms ease-in-out;
  -ms-transition: height 350ms ease-in-out;
  -o-transition: height 350ms ease-in-out;
  transition: height 350ms ease-in-out;
}

@mixin border-box{
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box; 
  box-sizing: border-box;
}

@mixin zero{
  margin: 0;
  padding: 0;
}

@mixin hide-text{
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

@mixin show-text{
  text-indent: 0;
  white-space: normal;
  overflow: visible;
}

@mixin text-shadow{
  text-shadow: 0 1px 1px #333;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
}

@mixin date-styles{
  color: #999;
  font-weight: bold;
  font-style: italic;
  margin-left: 2px;
  margin-bottom: .5em;
  display: block;
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

// SVG Fallback for BG Image

$public_path: "./";
 
@mixin vector-bg-with-fallback($name) {
  background-image: url('#{$public_path}images/#{$name}.png');
  background-image: none, url('#{$public_path}images/#{$name}.svg');
}


// Clearfix
.cf:before,
.cf:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

.cf:after {
    clear: both;
}

/**
 * For IE 6/7 only
 * Include this rule to trigger hasLayout and contain floats.
 */
.cf {
    *zoom: 1;
}


// Alpha Mixin

@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}

